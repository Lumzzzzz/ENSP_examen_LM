[{"name":"app.R","content":"library(shiny)\nlibrary(ggplot2)\nlibrary(glue)\nlibrary(dplyr)\nlibrary(DT)\nlibrary(shinyjs)\nlibrary(shinylive)\nlibrary(bslib)\nlibrary(thematic)\nlibrary(shinyjs)\n\nthematic_shiny(font = \"auto\")\n\ndata(diamonds)\n\nui <- fluidPage(\n  useShinyjs(),\n  theme = bs_theme(\n    version = 5,\n    bootswatch = \"minty\"\n  ),\n  \n  titlePanel(\"Exploration des Diamants\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      radioButtons(\"pink_points\", \"Colorier les points en rose ?\",\n                   choices = c(\"Oui\", \"Non\")),\n      \n      selectInput(\"color_filter\", \"Choisir une couleur Ã  filtrer :\", \n                  choices = c(\"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\")),\n      \n      sliderInput(\"range_price\", \"Prix maximum :\", \n                  min = 300, max = 20000, value = c(300, 5000), step = 100),\n      actionButton(\"show_notif\", \"Afficher une notification\")\n    ),\n    \n    mainPanel(\n      plotOutput(\"plot\"),\n      DTOutput(\"table\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  observe({\n    updateSliderInput(session, \"range_price\", min = 300, value = c(300, input$range_price[2]))\n  })\n  \n  runjs(\"\n      $('.shiny-notification').css({\n        'background-color': 'white',\n        'color': 'black'\n      });\n    \")\n  \n  filtered_data <- reactive({\n    diamonds %>%\n      filter(color == input$color_filter,\n             price >= input$range_price[1], price <= input$range_price[2])\n  })\n  \n  observeEvent(input$show_notif, {\n    showNotification(glue(\"Prix: {input$range_price[2]} & Couleur: {input$color_filter}\"),\n                     type = \"message\", duration = 3)\n  })\n  \n  output$plot <- renderPlot({\n    data <- filtered_data()\n    \n    ggplot(data, aes(x = carat, y = price)) +\n      geom_point(color = ifelse(input$pink_points == \"Oui\", \"pink\", \"blue\"), alpha = 0.5) +\n      labs(title = glue(\"prix: {input$range_price[2]} & color: {input$color_filter}\"),\n           x = \"carat\", y = \"price\") +\n      theme_minimal(base_family = \"Nanum Gothic Coding\") +\n      theme(\n        plot.title = element_text(color = \"darkgray\"),\n        axis.text = element_text(color = \"darkgray\"),\n        axis.title = element_text(color = \"darkgray\")\n      )\n  })\n  \n  output$table <- renderDT({\n    filtered_data() %>%\n      select(carat, cut, color, clarity, depth, table, price) %>%\n      datatable(options = list(pageLength = 10))\n  })\n}\n\n\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"project.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"}]
